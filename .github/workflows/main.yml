name: Spring Boot Gradle CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Check out the code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-
      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Build with Gradle
        env:
          SPRING_DATASOURCE_URL: ${{ secrets.DATABASE_URL }}
          SPRING_DATASOURCE_USERNAME: ${{ secrets.DB_USERNAME }}
          SPRING_DATASOURCE_PASSWORD: ${{ secrets.DB_PASSWORD }}
        run: ./gradlew build

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Check out the code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-
      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Set SQL environment variables
        env:
          SPRING_DATASOURCE_URL: ${{ secrets.DATABASE_URL }}
          SPRING_DATASOURCE_USERNAME: ${{ secrets.DB_USERNAME }}
          SPRING_DATASOURCE_PASSWORD: ${{ secrets.DB_PASSWORD }}
        run: echo "SQL URI set"

      - name: Run Tests with Gradle
        run: ./gradlew test
        env:
          SPRING_DATASOURCE_URL: ${{ secrets.DATABASE_URL }}
          SPRING_DATASOURCE_USERNAME: ${{ secrets.DB_USERNAME }}
          SPRING_DATASOURCE_PASSWORD: ${{ secrets.DB_PASSWORD }}
  Integrationtest:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Check out the code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-
      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Set SQL environment variables
        env:
          SPRING_DATASOURCE_URL: ${{ secrets.DATABASE_URL }}
          SPRING_DATASOURCE_USERNAME: ${{ secrets.DB_USERNAME }}
          SPRING_DATASOURCE_PASSWORD: ${{ secrets.DB_PASSWORD }}
        run: echo "SQL URI set"

      - name: Run Tests with Gradle
        run: ./gradlew integrationTest
        env:
          SPRING_DATASOURCE_URL: ${{ secrets.DATABASE_URL }}
          SPRING_DATASOURCE_USERNAME: ${{ secrets.DB_USERNAME }}
          SPRING_DATASOURCE_PASSWORD: ${{ secrets.DB_PASSWORD }}
  


  sonar:
    runs-on: ubuntu-latest
    needs: [test,Integrationtest]
    steps:
      - name: Check out the code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-
      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Set SQL environment variables
        env:
          SPRING_DATASOURCE_URL: ${{ secrets.DATABASE_URL }}
          SPRING_DATASOURCE_USERNAME: ${{ secrets.DB_USERNAME }}
          SPRING_DATASOURCE_PASSWORD: ${{ secrets.DB_PASSWORD }}
        run: echo "SQL environment variables set"
      - name: SonarCloud Scan
        env: 
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: ./gradlew build sonar
  snyk:
      runs-on: ubuntu-latest
      needs: sonar
      steps:
        - name: Check out the code
          uses: actions/checkout@v3
  
        - name: Set up JDK 17
          uses: actions/setup-java@v3
          with:
            distribution: 'temurin'
            java-version: '17'
  
        - name: Cache Gradle packages
          uses: actions/cache@v3
          with:
            path: ~/.gradle/caches
            key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
            restore-keys: |
              gradle-${{ runner.os }}-
        - name: Make gradlew executable
          run: chmod +x ./gradlew   
      
       
        - name: Install Snyk CLI via npm
          run: npm install -g snyk
  
        
        - name: Authenticate Snyk
          run: snyk auth ${{ secrets.SNYK_TOKEN }}
  
      
        - name: Snyk Vulnerability Test
          run: snyk test 
          env:
            SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
  
        
        - name: Snyk Monitor for Continuous Tracking
          run: snyk monitor
          env:
            SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
  docker:
     runs-on: ubuntu-latest
     needs: snyk
     steps:
        - name: Check out the code
          uses: actions/checkout@v3
  
        - name: Set up JDK 17
          uses: actions/setup-java@v3
          with:
            distribution: 'temurin'
            java-version: '17'
  
        - name: Cache Gradle packages
          uses: actions/cache@v3
          with:
            path: ~/.gradle/caches
            key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
            restore-keys: |
              gradle-${{ runner.os }}-
        - name: Make gradlew executable
          run: chmod +x ./gradlew   
        - name: Build the application
          run: ./gradlew build
        - name: Log in to Docker Hub
          uses: docker/login-action@v2
          with:
               username: ${{ secrets.REGISTRY_USERNAME }}
               password: ${{ secrets.REGISTRY_PASSWORD }}
        - name: Build Docker image
          run: docker build -t sallyphaan/authenticationcc:latest .
        - name: Push Docker image
          run: |
              docker push sallyphaan/authenticationcc:latest
  deploy:
    runs-on: ubuntu-latest
    needs: docker  # Ensures this job runs after the 'docker' job completes
    steps:
      # Log in to Azure
      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Deploy to Azure Container Instances (ACI)
      - name: Deploy to ACI
        run: |
          az container update \
            --resource-group circlineRG \
            --name authentication-app \
            --image sallyphaan/authenticationcc:latest \
            --ports 8081 \
            --dns-name-label authentication-app-dns \
            --os-type Linux \
            --cpu 1 --memory 1.5 \
            --registry-username ${{ secrets.REGISTRY_USERNAME }} \
            --registry-password ${{ secrets.REGISTRY_PASSWORD }} \
            --registry-login-server index.docker.io
     
